(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{294:function(e,t,s){e.exports=s.p+"assets/img/kustomize_install.bdc00730.png"},295:function(e,t,s){e.exports=s.p+"assets/img/kind_install.b6235c80.png"},296:function(e,t,s){e.exports=s.p+"assets/img/kind_cluster.601a8efa.png"},297:function(e,t,s){e.exports=s.p+"assets/img/Kubeflow_manifest_clone.d403b30e.png"},298:function(e,t,s){e.exports=s.p+"assets/img/Kubeflow_manifest_folder.a75839ac.png"},299:function(e,t,s){e.exports=s.p+"assets/img/Kubeflow_pods_running.9dc7d800.png"},300:function(e,t,s){e.exports=s.p+"assets/img/Kubeflow_dashboard_proxy.e53e4afe.png"},301:function(e,t,s){e.exports=s.p+"assets/img/Kubeflow_dashboard_login.99b901a7.png"},302:function(e,t,s){e.exports=s.p+"assets/img/Kubeflow_dashboard.7bdbc1cd.png"},303:function(e,t,s){e.exports=s.p+"assets/img/kubeflow_jupyter_notebook.1f4a47a5.png"},326:function(e,t,s){"use strict";s.r(t);var a=s(14),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"kubeflow-for-mac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubeflow-for-mac"}},[e._v("#")]),e._v(" Kubeflow for Mac")]),e._v(" "),t("h2",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),t("p",[e._v("Kubeflow needs the following tools to be installed in the system before the setup")]),e._v(" "),t("ul",[t("li",[e._v("Docker")]),e._v(" "),t("li",[e._v("Kubernetes")]),e._v(" "),t("li",[e._v("Kustomize")])]),e._v(" "),t("p",[e._v("Since we have already installed Docker Desktop and also enabled Kubernetes in our previous step, we should continue installing Kustomize to proceed with the setup of Kubeflow")]),e._v(" "),t("h2",{attrs:{id:"installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),t("h3",{attrs:{id:"step-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1"}},[e._v("#")]),e._v(" Step 1")]),e._v(" "),t("p",[e._v("Let's install Kustomize using HomeBrew for mac. There are installation options for other operating systems as specified here\n"),t("a",{attrs:{href:"https://kubectl.docs.kubernetes.io/installation/kustomize/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kustomize"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("brew install kustomize\n")])])]),t("p",[t("img",{attrs:{src:s(294),alt:"Image from images folder"}})]),e._v(" "),t("h3",{attrs:{id:"step-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2"}},[e._v("#")]),e._v(" Step 2")]),e._v(" "),t("p",[e._v("Let's install "),t("a",{attrs:{href:"https://kind.sigs.k8s.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kind"),t("OutboundLink")],1),e._v(" using HomeBrew for mac. Kind supports running local kubernetes clusters on Docker")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("brew install kind\n")])])]),t("p",[t("img",{attrs:{src:s(295),alt:"Image from images folder"}})]),e._v(" "),t("h3",{attrs:{id:"step-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3"}},[e._v("#")]),e._v(" Step 3")]),e._v(" "),t("p",[e._v("Let's create a Kind cluster with the following yaml content (Includes 2 worker nodes)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('cat <<EOF | kind create cluster --name=kubeflow  --kubeconfig mycluster.yaml --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: ClusterConfiguration\n    apiServer:\n      extraArgs:\n        "service-account-issuer": "kubernetes.default.svc"\n        "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"\n- role: worker\n- role: worker\nEOF\n')])])]),t("p",[e._v("The above step should be creating a kind cluster as shown below")]),e._v(" "),t("p",[t("img",{attrs:{src:s(296),alt:"Image from images folder"}})]),e._v(" "),t("h3",{attrs:{id:"step-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4"}},[e._v("#")]),e._v(" Step 4")]),e._v(" "),t("p",[e._v("Save kubeconfig - This step is to ensure that all config data is stored in a backup file")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mv ~/.kube/config ~/.kube/config_backup\nkind get kubeconfig --name kubeflow > ~/.kube/config\n")])])]),t("p",[e._v("Both the above steps should run without any issues / output content")]),e._v(" "),t("h3",{attrs:{id:"step-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-5"}},[e._v("#")]),e._v(" Step 5")]),e._v(" "),t("p",[e._v("Create a secret based on existing credentials in order to pull the images (Update the --from-file parameter to include the full path)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker login\nkubectl create secret generic regcred \\\n    --from-file=.dockerconfigjson=~/.docker/config.json \\\n    --type=kubernetes.io/dockerconfigjson\n")])])]),t("h3",{attrs:{id:"step-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-6"}},[e._v("#")]),e._v(" Step 6")]),e._v(" "),t("p",[e._v("Clone the kubeflow's manifest repository")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git clone https://github.com/kubeflow/manifests.git\n")])])]),t("p",[t("img",{attrs:{src:s(297),alt:"Image from images folder"}})]),e._v(" "),t("p",[e._v("Change to the manifest folder")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cd manifests\n")])])]),t("p",[e._v("You should be able to see the following (or similar) files as shown below")]),e._v(" "),t("p",[t("img",{attrs:{src:s(298),alt:"Image from images folder"}})]),e._v(" "),t("h3",{attrs:{id:"step-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-7"}},[e._v("#")]),e._v(" Step 7")]),e._v(" "),t("p",[e._v("Build and apply the YAML files for all kubeflow components. This step will install all Kubeflow official components (residing under apps) and all common services (residing under common)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done\n')])])]),t("p",[e._v("The above command should run for sometime to complete setting up the kubeflow components.")]),e._v(" "),t("p",[e._v("At the end, all the kubeflow pods should be up and runnings as shown below")]),e._v(" "),t("p",[t("img",{attrs:{src:s(299),alt:"Image from images folder"}})]),e._v(" "),t("p",[e._v("Verify if all the pods are ready by individually checking them with the names below")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get pods -n cert-manager\nkubectl get pods -n istio-system\nkubectl get pods -n auth\nkubectl get pods -n knative-eventing\nkubectl get pods -n knative-serving\nkubectl get pods -n kubeflow\nkubectl get pods -n kubeflow-user-example-com\n")])])]),t("h2",{attrs:{id:"issues"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#issues"}},[e._v("#")]),e._v(" Issues")]),e._v(" "),t("p",[e._v("I did end up with several pods unable to run due to missing images for the Apple silicon arm64 architecture. I had to update the image tags and also rebuild the kserve/models-web-app into a separate docker image and host it on my repository")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("Update the tags from v1.8.0-rc.0 to v1.8.0 for the following images")]),e._v(" "),t("p",[e._v("Please go into the app and common folders and update the "),t("b",[e._v("kustomization.yaml")]),e._v(" file to update the tags")]),e._v(" "),t("ul",[t("li",[e._v("kubeflownotebookswg/centraldashboard")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/poddefaults-webhook")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/jupyter-web-app")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/notebook-controller")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/profile-controller")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/kfam")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/pvcviewer-controller")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/tensorboard-controller")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/tensorboards-web-app")]),e._v(" "),t("li",[e._v("kubeflownotebookswg/volumes-web-app")]),e._v(" "),t("li",[e._v("kserve/models-web-app")])]),e._v(" "),t("p",[e._v("For the kserve/models-web-app, clone the public repository "),t("a",{attrs:{href:"https://github.com/kserve/models-web-app.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/kserve/models-web-app.git"),t("OutboundLink")],1),e._v(" and build the docker image with the below commands")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker build -t <any org>/models-web-app:v1.0.0 .\n\ndocker push <any org>/models-web-app:v1.0.0\n\n")])])]),t("p",[e._v("Also update the following files in the Kubeflow manifest's repository to reflect the new image")]),e._v(" "),t("ul",[t("li",[e._v("contrib/kserve/models-web-app/base/deployment.yaml")]),e._v(" "),t("li",[e._v("contrib/kserve/models-web-app/base/kustomization.yaml")])]),e._v(" "),t("p",[e._v("Below are some handy commands to look at the pods and inspect the errors for corrective actions")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get pods -A\nkubectl describe pod --namespace=kubeflow <podname>\n")])])])]),e._v(" "),t("h2",{attrs:{id:"test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[e._v("#")]),e._v(" Test")]),e._v(" "),t("p",[e._v("One last step to access the Kubeflow's built-in Dashboard is to use the kubectl proxy to forward the requests through the istio-ingressgateway service in the istio-system namespace.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl port-forward svc/istio-ingressgateway -n istio-system 9090:80\n")])])]),t("p",[e._v("You should be able to see like below")]),e._v(" "),t("p",[t("img",{attrs:{src:s(300),alt:"Image from images folder"}})]),e._v(" "),t("p",[e._v("The Login screen for the Kubeflow dashboard should appear like below once the proxy starts working")]),e._v(" "),t("p",[t("img",{attrs:{src:s(301),alt:"Image from images folder"}})]),e._v(" "),t("p",[e._v("Once you login with the following credentials, you should be able to see the dashboard")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("user@example.com\n12341234\n")])])]),t("p",[t("img",{attrs:{src:s(302),alt:"Image from images folder"}})]),e._v(" "),t("p",[e._v("Tried opening a Jupyter Notebook and its able to launch as shown below")]),e._v(" "),t("p",[t("img",{attrs:{src:s(303),alt:"Image from images folder"}})]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("At this point in time, I'm not sure how the credentials are stored / updated but the dashboard does take some time to show up and also apply the namespace")]),e._v(" "),t("p",[e._v("I was put on the kubeflow-user-example-com namespace by default")]),e._v(" "),t("p",[e._v("Also, the Jupyter Notebook requires worker nodes to be setup as its launched as a separate pod")]),e._v(" "),t("ul",[t("li",[e._v("Our kind cluster configuration takes care of this requirement by adding 2 worker nodes")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);